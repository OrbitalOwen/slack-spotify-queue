diff --git a/node_modules/spotify-web-api-node/src/http-manager.js b/node_modules/spotify-web-api-node/src/http-manager.js
index ce86be1..18af322 100644
--- a/node_modules/spotify-web-api-node/src/http-manager.js
+++ b/node_modules/spotify-web-api-node/src/http-manager.js
@@ -31,24 +31,37 @@ var _getParametersFromRequest = function(request) {
 /* Create an error object from an error returned from the Web API */
 var _getErrorObject = function(defaultMessage, err) {
   var errorObject;
-  if (typeof err.error === 'object' && typeof err.error.message === 'string') {
-    // Web API Error format
-    errorObject = new WebApiError(err.error.message, err.error.status);
-  } else if (typeof err.error === 'string') {
-    // Authorization Error format
-    /* jshint ignore:start */
-    errorObject = new WebApiError(err.error + ': ' + err['error_description']);
-    /* jshint ignore:end */
-  } else if (typeof err === 'string') {
-    // Serialized JSON error
+
+  if (typeof err.error === 'object') {
     try {
-      var parsedError = JSON.parse(err);
-      errorObject = new WebApiError(
-        parsedError.error.message,
-        parsedError.error.status
-      );
-    } catch (err) {
-      // Error not JSON formatted
+      // Format that seems to be actually returned
+      const errorBody = err.error.response.body.error
+      errorObject = new WebApiError(errorBody.message, errorBody.status);
+    } catch {
+      // Web API Error format
+      if (typeof err.error.message === 'string') {
+        errorObject = new WebApiError(err.error.message, err.error.status);
+      }
+    }
+  }
+
+  if (!errorObject) {
+    if (typeof err.error === 'string') {
+      // Authorization Error format
+      /* jshint ignore:start */
+      errorObject = new WebApiError(err.error + ': ' + err['error_description']);
+      /* jshint ignore:end */
+    } else if (typeof err === 'string') {
+      // Serialized JSON error
+      try {
+        var parsedError = JSON.parse(err);
+        errorObject = new WebApiError(
+          parsedError.error.message,
+          parsedError.error.status
+        );
+      } catch (err) {
+        // Error not JSON formatted
+      }
     }
   }
 
diff --git a/node_modules/spotify-web-api-node/src/spotify-web-api.js b/node_modules/spotify-web-api-node/src/spotify-web-api.js
index b79a5f1..367b767 100644
--- a/node_modules/spotify-web-api-node/src/spotify-web-api.js
+++ b/node_modules/spotify-web-api-node/src/spotify-web-api.js
@@ -1081,8 +1081,8 @@ SpotifyWebApi.prototype = {
       .withPath('/v1/me/player')
       .withHeaders({ 'Content-Type': 'application/json' })
       .withBodyParameters({
-        device_ids: options.deviceIds,
-        play: !!options.play
+        device_ids: options.device_ids,
+        play: options.play
       })
       .build()
       .execute(HttpManager.put, callback);
@@ -1103,7 +1103,7 @@ SpotifyWebApi.prototype = {
       ? { device_id: _options.device_id }
       : null;
     var postData = {};
-    ['context_uri', 'uris', 'offset'].forEach(function(field) {
+    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {
       if (field in _options) {
         postData[field] = _options[field];
       }
@@ -1206,7 +1206,8 @@ SpotifyWebApi.prototype = {
     return WebApiRequest.builder(this.getAccessToken())
       .withPath('/v1/me/player/repeat')
       .withQueryParameters({
-        state: options.state || 'off'
+        state: options.state || 'off',
+        device_id: options.device_id || null
       })
       .build()
       .execute(HttpManager.put, callback);
